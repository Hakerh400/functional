0, 1,
==, =, var, [],
read, write, eof,

//////////////////////////////////////////////////////////////////////////////////////////////////,

var(.head, []()()),
var(.tail, []()()),
var(.push, []()()),
var(.pop, []()()),
var(.unshift, []()()),
var(.shift, []()()),
var(.append, []()()),
var(.clone, []()()),
var(.forEach, []()()),
var(.write, []()()),

//////////////////////////////////////////////////////////////////////////////////////////////////,

var(not, [](a)(==(a, 0))),
var(bool, [](a)(not(not(a)))),

var(&&, [](a, b)(a(b))),
var(||, [](a, b)(a(1, b))),
var(^^, [](a, b)(a(not(b), b))),

//////////////////////////////////////////////////////////////////////////////////////////////////,

var(while, [](cond, func)(
  var(temp, bool(cond()))(while)(cond, func, temp(func)())
)),

//////////////////////////////////////////////////////////////////////////////////////////////////,

var(Pair, [](a, b)(
  [](mode, index, val)(
    =(index, not(index)),
    not(mode)([]()(
      index(a, b)
    ), []()(
      index([]()(
        =(a, val)
      ), []()(
        =(b, val)
      ))()
    ))()
  )
)),

//////////////////////////////////////////////////////////////////////////////////////////////////,

var(Byte, [](a, b, c, d, e, f, g, h)(
  var(pair, Pair(Pair(Pair(a, b), Pair(c, d)), Pair(Pair(e, f), Pair(g, h)))),
  [](mode, i0, i1, i2, val)(
    pair(0, i2)(0, i1)(mode, i0, val)
  )
)),

var(clone, [](byte)(
  Byte(
    byte(0, 0, 0, 0), byte(0, 1, 0, 0),
    byte(0, 0, 1, 0), byte(0, 1, 1, 0),
    byte(0, 0, 0, 1), byte(0, 1, 0, 1),
    byte(0, 0, 1, 1), byte(0, 1, 1, 1)
  )
)),

var(forEach, [](byte, func)(
  func(byte(0, 0, 0, 0), 0, 0, 0), func(byte(0, 1, 0, 0), 1, 0, 0),
  func(byte(0, 0, 1, 0), 0, 1, 0), func(byte(0, 1, 1, 0), 1, 1, 0),
  func(byte(0, 0, 0, 1), 0, 0, 1), func(byte(0, 1, 0, 1), 1, 0, 1),
  func(byte(0, 0, 1, 1), 0, 1, 1), func(byte(0, 1, 1, 1), 1, 1, 1),
  byte
)),

var(map, [](byte, func)(
  =(byte, clone(byte)),
  forEach(byte, [](bit, i0, i1, i2)(
    byte(1, i0, i1, i2, func(bit, i0, i1, i2))
  ))
)),

var(cmp, [](b1, b2)(
  var(eq),
  var(gt),
  var(lt),

  forEach(b1, [](bit1, i0, i1, i2)(
    var(bit2, b2(0, i0, i1, i2)),
    var(eq1, ==(bit1, bit2)),

    =(gt, ||(&&(gt, eq1), &&(bit1, not(bit2)))),
    =(lt, ||(&&(lt, eq1), &&(not(bit1), bit2))),
    =(eq, &&(eq, eq1))
  )),

  Pair(gt, lt)
)),

var(eq, [](b1, b2)(
  var(temp, cmp(b1, b2)),
  not(||(temp(0, 0), temp(0, 1)))
)),

var(neq, [](b1, b2)(
  not(eq(b1, b2))
)),

var(gt, [](b1, b2)(
  cmp(b1, b2)(0, 0)
)),

var(lt, [](b1, b2)(
  cmp(b1, b2)(0, 1)
)),

var(&, [](b1, b2)(
  map(a, [](bit, i0, i1, i2)(&&(bit, b2(0, i0, i1, i2))))
)),

var(|, [](b1, b2)(
  map(a, [](bit, i0, i1, i2)(||(bit, b2(0, i0, i1, i2))))
)),

var(^, [](b1, b2)(
  map(a, [](bit, i0, i1, i2)(^^(bit, b2(0, i0, i1, i2))))
)),

var(+c, [](b1, b2)(
  var(carry, 0),
  Pair(map(b1, [](bit1, i0, i1, i2)(
    var(bit2, b2(0, i0, i1, i2)),
    var(temp, ^^(carry, ^^(bit1, bit2))),
    =(carry, ||(&&(bit1, bit2), ||(&&(bit1, carry), &&(bit2, carry)))),
    temp
  )), carry)
)),

var(+, [](b1, b2)(
  +c(b1, b2)(0, 0)
)),

var(neg, [](byte)(
  +(map(byte, [](bit)(not(bit))), Byte(1))
)),

var(-, [](b1, b2)(
  +(b1, neg(b2))
)),

var(*, [](b1, b2)(
  var(b3, Byte()),

  while([]()(not(eq(b2, Byte()))), []()(
    =(b3, +(b3, b1)),
    =(b2, -(b2, Byte(1)))
  )),

  b3
)),

var(/, [](b1, b2)(
  var(b3, clone(b2)),
  var(b4, Byte()),
  var(carry, 0),

  while([]()(not(||(gt(b3, b1), carry))), []()(
    =(b4, +(b4, Byte(1))),

    var(sum, +c(b3, b2)),
    =(b3, sum(0, 0)),
    =(carry, sum(0, 1))
  )),

  b4
)),

var(%, [](b1, b2)(
  -(b1, *(/(b1, b2), b2))
)),

//////////////////////////////////////////////////////////////////////////////////////////////////,

var(List, []()(
  var(head, 0),
  var(tail, 0),

  var(push, [](val, elem)(
    =(elem, Pair(val, Pair(tail))),

    not(head)([]()(
      =(head, =(tail, elem))
    ), []()(
      tail(0, 1)(1, 1, elem),
      =(tail, elem)
    ))()
  )),

  var(pop, [](val)(
    =(val, tail(0, 0)),
    =(tail, tail(0, 1)(0, 0)),

    not(tail)([]()(
      =(head, 0)
    ), []()(
      tail(0, 1)(1, 1, 0)
    ))(),

    val
  )),

  var(unshift, [](val, elem)(
    =(elem, Pair(val, Pair(0, head))),

    not(head)([]()(
      =(head, =(tail, elem))
    ), []()(
      head(0, 1)(1, 0, elem),
      =(head, elem)
    ))()
  )),

  var(shift, [](val)(
    =(val, head(0, 0)),
    =(head, head(0, 1)(0, 1)),

    not(head)([]()(
      =(tail, 0)
    ), []()(
      head(0, 1)(1, 0, 0)
    ))(),

    val
  )),

  var(forEach, [](func)(
    var(head, this .head),

    while([]()(head), []()(
      func(head(0, 0)),
      =(head, head(0, 1)(0, 1))
    )),

    this
  )),

  var(this, [](prop)(
    ==(prop, .head)(head,
    ==(prop, .tail)(tail,
    ==(prop, .push)(push,
    ==(prop, .pop)(pop,
    ==(prop, .unshift)(unshift,
    ==(prop, .shift)(shift,
    ==(prop, .forEach)(forEach
    )))))))
  ))
)),

//////////////////////////////////////////////////////////////////////////////////////////////////,

var(String, [](byte)(
  var(list, List()),

  var(concat, [](str)(
    str .forEach([](byte)(
      list .push(byte)
    )),

    this
  )),

  var(clone, []()(
    var(str, String()),

    list .forEach([](byte)(
      str .append(byte)
    )),

    str
  )),

  var(write, []()(
    list .forEach([](byte)(
      writeByte(byte)
    )),

    this
  )),

  var(append, [](byte)(
    list .push(byte)
  )),

  bool(byte)(append)(byte),

  var(this, [](prop)(
    var(ret, 0),

    &&(not(ret), ==(prop, .head))([]()(=(ret, list .head)))(),
    &&(not(ret), ==(prop, .tail))([]()(=(ret, list .tail)))(),
    &&(not(ret), ==(prop, .push))([]()(=(ret, list .push)))(),
    &&(not(ret), ==(prop, .pop))([]()(=(ret, list .pop)))(),
    &&(not(ret), ==(prop, .unshift))([]()(=(ret, list .unshift)))(),
    &&(not(ret), ==(prop, .shift))([]()(=(ret, list .shift)))(),
    &&(not(ret), ==(prop, .forEach))([]()(=(ret, list .forEach)))(),

    &&(not(ret), ==(prop, .clone))([]()(=(ret, clone)))(),
    &&(not(ret), ==(prop, .append))([]()(=(ret, append)))(),
    &&(not(ret), ==(prop, .write))([]()(=(ret, write)))(),

    not(ret)([]()(=(ret, concat(prop))))(),

    ret
  ))
)),

//////////////////////////////////////////////////////////////////////////////////////////////////,

var(readByte, []()(
  Byte(
    read(), read(), read(), read(),
    read(), read(), read(), read()
  )
)),

var(writeByte, [](byte)(
  forEach(byte, write)
)),

var(writeDigit, [](byte)(
  writeByte(+(byte, Byte(0, 0, 0, 0, 1, 1)))
)),

var(writeInt, [](byte)(
  gt(byte, Byte(1, 0, 0, 1))([]()(
    writeDigit(/(byte, Byte(0, 1, 0, 1))),
    writeDigit(%(byte, Byte(0, 1, 0, 1)))
  ), []()(
    writeDigit(byte)
  ))()
))